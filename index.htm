<!DOCTYPE html>
<html lang="en">

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!--not require css/fonts-->
    <link href='https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700' rel='stylesheet' type='text/css'>
    <link href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,600,700" rel="stylesheet">
    <!--<link rel="stylesheet" href="css/libs/nifty.css">-->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.1/css/all.css"
          integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" crossorigin="anonymous">
    <!--grid css-->
    <link rel="stylesheet" href="css/libs/gridstack.min.css"/>
    <link rel="stylesheet" href="css/libs/gridstack-extra.min.css"/>
    <!--our styles for dashboard and widgets-->
    <link rel="stylesheet" href="css/dashboard/main.min.css">
    <!--grid require-->
    <script src="js/libs/jquery.min.js"></script>
    <script src="js/libs/bootstrap.min.js"></script>
    <!--<script src="scripts/libs/nifty.min.js"></script>-->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.11.0/jquery-ui.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.0/lodash.min.js"></script>
    <!--grid js-->
    <script src="js/libs/gridstack.js"></script>
    <script src="js/libs/gridstack.jQueryUI.min.js"></script>

    <!--for timezone-->
    <script src="js/libs/moment.js"></script>
    <script src="js/libs/moment-timezone-with-data-2012-2022.js"></script>
    <!--our main js-->
    <script src="js/dashboard/main.js"></script>
    <title>Widgets Demo</title>
    <style>
        input {
            width: 100%;
        }
    </style>
</head>
<body>

<div class="dashboard">
    <div class="dashboardEditPanel" id="dashboardEditPanel">
        <div class="sidebar">
            <label>
                Gaps
                <br>
                <input type="number" id="gridGaps" min="0" max="10">
            </label>
            <br>
            <label>
                Cell height
                <br>
                <input type="number" id="gridCellHeight" min="30">
            </label>
            <br>
            <label>
                Columns
                <br>
                <input type="number" id="gridColumns" min="1" max="12">
            </label>
            <br>
            <label>
                Rows
                <br>
                <input type="number" id="gridRows">
            </label>
        </div>
        <div class="buttons">
            <button class="btn btn-primary" id="saveChanges">Done</button>
            <button class="btn btn-default" id="reset">Reset</button>
        </div>
    </div>

    <label class="handle-edit-mode-btn"> Edit <input type="checkbox" id="editMode"></label>
    <div class="grid-container">
        <div class="grid-stack" id="grid1"></div>
    </div>

    <div class="grid-item-popup" id="widget-popup">
        <div class="grid-item-popup__container" id="widget-popup-container">
        </div>
    </div>
</div>

<script type="text/javascript">
    $(() => {
        var
            gridId = "#grid1",
            // all allowed widgets
            allAllowedWidgets = ["clockWidget", "imageWidget", "workCountByActivityAndStatusWidget"],
            savedConfig,
            // saved widgets(default or user-saved)
            defaultConfig = savedConfig = [
                // {
                //     id: "workCountByActivityAndStatusWidget",
                //     x: 0,
                //     y: 0,
                //     width: 3,
                //     height: 2
                // },
                {
                    id: "imageWidget",
                    x: 0,
                    y: 0,
                    width: 2,
                    height: 2,
                    options: {
                        imageUrl: 'https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png',
                        fit: "contain"
                    }
                }
            ],
            isEditMode = false,
            clientId = 7,
            width = 12,
            height = 10,
            savedgridGaps,
            gridGaps = savedgridGaps = 5,
            cellHeight = 60,
            sideBar = $('.sidebar'),
            localStorage = window.localStorage,
            widgetsDict = {},
            categories;

        checkLocalStorage();
        gridInit();
        $('#gridRows')[0].value = height;
        renderCategories();
        widgetsInit(widgetsDict);
        handleEditMode(isEditMode);
        handleCommonEvents();
        handleGridEvents();

        addTilePlaceholders();

        function gridInit() {
            widgetsDict = {};
            categories = [];
            allAllowedWidgets.map(w => {
                var instances = defaultConfig
                    .filter(x => x.id === w)
                    .map(x => Widget.widgetInitializer(w, clientId, x));
                widgetsDict[w] = {
                    sidebarSettings: Widget.getSidebarSettings(w),
                    gridInstances: instances
                };
                categories.push(widgetsDict[w].sidebarSettings.category);
            });

            categories = _.uniqBy(categories);
            // dashboard activation

            $(gridId).gridstack({
                width: width,
                height: height,
                float: true,
                // animate: true,
                acceptWidgets: '.grid-stack-item',
            });


            $(gridId).data("gridstack").setGridWidth(width);

            $(gridId)
                .on('dropover', (ev, ui) => ui.helper.hide())
                .on('dropout', (ev, ui) => ui.helper.show());

            $(gridId).data("gridstack").cellHeight(cellHeight);
            $('#gridGaps')[0].value = gridGaps;
            $('#gridCellHeight')[0].value = cellHeight;
            $('#gridColumns')[0].value = width;

            setGridHeight();
        }

        function gridReInit(defaultGrid) {
            // clear sidebar
            $(".sidebar .gs-panel").remove();
            // remove grid
            $(gridId).data("gridstack").destroy();

            // append new grid selector
            $('<div class="grid-stack" id="grid1"></div>').appendTo(".grid-container");

            if (typeof defaultGrid !== "undefined" && defaultGrid) {
                defaultConfig = savedConfig;
                gridGaps = savedgridGaps;
            } else {
                checkLocalStorage();

            }
            gridInit();
            renderCategories();
            widgetsInit(widgetsDict);
            setGridHeight();
            $(".grid-placeholder-cell").remove();
            addTilePlaceholders();

            if (typeof defaultGrid !== "undefined" && defaultGrid) {
                handleEditMode(false);
            } else {
                handleEditMode(true);
            }

            handleGridEvents();
            localStorage.removeItem("widgets")
        }

        function addTilePlaceholders() {
            var
                cellHeight = $(gridId).data("gridstack").cellHeight(),
                rowHeight = $(gridId).data("gridstack").cellHeight() + $(gridId).data("gridstack").opts.verticalMargin;


            if (height > 0 && width > 0) {
                for (var i = 0; i < width; i++) {
                    var left = 100 * i / width;
                    for (var j = 0; j < height; j++) {
                        var
                            $placeholderCell = $("<div class='grid-placeholder-cell'></div>"),
                            top = rowHeight * j;
                        $placeholderCell.css("left", left + "%");
                        $placeholderCell.css("top", top + "px");
                        $placeholderCell.css("height", cellHeight + "px");
                        $placeholderCell.appendTo(".grid-container");
                    }
                }
            }
            $(".grid-placeholder-cell").css("border-left-width", $(gridId).data("gridstack").opts.verticalMargin + "px");
            $(".grid-placeholder-cell").css("border-right-width", $(gridId).data("gridstack").opts.verticalMargin + "px");
            $(gridId + " .grid-stack-item-content").css("left", gridGaps + "px");
            $(gridId + " .grid-stack-item-content").css("right", gridGaps + "px");
        }

        function setGridHeight() {
            $(gridId).height(($(gridId).data("gridstack").opts.cellHeight + $(gridId).data("gridstack").opts.verticalMargin) * height);
            $(gridId).data("data-gs-current-height", height);
        }

        function checkLocalStorage() {
            let localstore = JSON.parse(localStorage.getItem("widgets"));
            if (typeof localstore !== "undefined" && localstore != null && localstore.widgets.length > 0) {
                defaultConfig = localstore.widgets;
            }
            if (typeof localstore !== "undefined" && localstore != null && typeof localstore.gridConfig !== "undefined") {
                gridGaps = localstore.gridConfig.gaps;
                width = localstore.gridConfig.columns;
                cellHeight = localstore.gridConfig.cellHeight;
                height = localstore.gridConfig.rows;
            }
        }

        function renderCategories() {
            categories.forEach(x => {
                sideBar
                    .append(
                        $('<div>').addClass('gs-panel gs-panel-default')
                            .append($('<div>').addClass('gs-panel-heading')
                                .append($('<div>').addClass('gs-panel-title')
                                    .append('<i class="fas fa-chevron-circle-up"></i> ' + x)))
                            .append($('<div>').addClass('gs-panel-collapse collapse in').attr('id', x)
                                .append($('<div>').addClass('gs-panel-body'))
                            )
                    )
            });
        }

        function addToSideBar(id, widget, remove) {
            var config = widget.sidebarSettings;
            var count = config.maxCount - widget.gridInstances.length;
            var isNeededToAdd = remove ? count === 1 : count > 0;

            if (isNeededToAdd) {
                var icon = $('<div class="widget-icon"><i class="' + config.icon + '"></i></div>');
                var body = $('<div>').addClass('gs-widget-body')
                    .append($('<div>').addClass('gs-widget-title')
                        .text(config.title)
                        .attr('data-widget-count', count == Infinity ? '' : count))
                    .append($('<hr>'))
                    .append($('<div>').addClass('gs-widget-description').text(config.description));

                $('<div class="grid-stack-item sid" data-widget="' + id + '"></div>')
                    .append(icon)
                    .append(body)
                    .data('_gridstack_node', {
                        width: config.defaultWidth,
                        height: config.defaultHeight
                    })
                    .draggable({
                        revert: 'invalid',
                        handle: '.gs-widget-body',
                        scroll: false,
                        appendTo: 'body'
                    })
                    .appendTo(sideBar.find('#' + config.category).find('.gs-panel-body'));
            }
            else if (remove && count > 0) {
                $('.sid[data-widget="' + id + '"] .widget-title').attr('data-widget-count', count == Infinity ? '' : count);
            }
        }

        function widgetsInit(widgets) {
            let widgetsDefault = [];

            for (var widgetId in widgets) {
                let widgetConfig = widgets[widgetId];
                if (widgetConfig.gridInstances.length < widgetConfig.sidebarSettings.maxCount) {
                    addToSideBar(widgetId, widgetConfig);
                }
                widgetsDefault = widgetsDefault.concat(widgetConfig.gridInstances);
            }
            if (widgetsDefault.length > 0) {
                renderWidgets(widgetsDefault);
            }
        }

        function renderWidgets(activeWidgets, element) {
            activeWidgets.forEach(widget => {
                var el = $('<div class="grid-stack-item"><div class="grid-stack-item-content"><div class="widget-content"><div class="widget-loading-container">' +
                    '<div class="widget-loading"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div>' +
                    '</div></div></div></div></div>');

                if (element) {
                    element.find('.gs-widget-body').remove();
                    element.find('.widget-icon').remove();
                    el = element.prepend(el.find('.grid-stack-item-content'));
                }

                el.attr('data-widget', widget.id);

                var grid = $(gridId).data("gridstack");

                if (element) {
                    el.attr('data-gs-id', widget.uid);
                    grid.update(
                        el,
                        widget.position.x,
                        widget.position.y,
                        widget.size.width,
                        widget.size.height,
                    );
                }
                else {
                    grid.addWidget(
                        el,
                        widget.position.x,
                        widget.position.y,
                        widget.size.width,
                        widget.size.height,
                        false,
                        widget.config.minWidth,
                        widget.config.maxWidth,
                        widget.config.minHeight,
                        widget.config.maxHeight,
                        widget.uid
                    );
                }

                grid.minWidth(el, widget.config.minWidth);
                grid.minHeight(el, widget.config.minHeight);
                grid.maxHeight(el, widget.config.maxHeight);
                grid.maxWidth(el, widget.config.maxWidth);
                grid.resizable(el, widget.sidebarSettings.isResizable);
                grid.movable(el, widget.sidebarSettings.isMovable);

                widget.initBase(el.find('.widget-content')[0]);
                setWidgetClasses(el[0],widget.size.width);
            });


            // setWidgetClasses(items[i].el[0],widgetId,items[i].width);

            $(gridId + ".grid-stack-item-content").css("left", gridGaps + "px");
            $(gridId + ".grid-stack-item-content").css("right", gridGaps + "px");
            $(gridId).data("gridstack").verticalMargin(gridGaps);
        }

        function saveGrid() {
            let
                activeWidgets = [],
                dashboard = {
                    widgets: [],
                    gridConfig: {
                        gaps: $(gridId).data("gridstack").verticalMargin(),
                        columns: $(gridId).data("gridstack").grid.width,
                        cellHeight: $(gridId).data("gridstack").cellHeight(),
                        rows: height
                    }
                };
            setTimeout(() => {
                for (let i = 0; $(gridId).data("gridstack").grid.nodes.length > i; i++) {
                    let itemData = $(gridId).data("gridstack").grid.nodes[i].el[0].dataset;
                    if (typeof itemData.widget !== 'undefined') {
                        let newWidget = {
                            id: itemData.widget,
                            uid: itemData.gsId,
                            x: itemData.gsX,
                            y: itemData.gsY,
                            width: itemData.gsWidth,
                            height: itemData.gsHeight
                        };
                        let instance = widgetsDict[itemData.widget].gridInstances.find((item) => {
                            return item.uid === itemData.gsId
                        });
                        if (instance && instance.options) {
                            newWidget.options = instance.options;
                        }
                        activeWidgets.push(newWidget);
                    }
                }
                dashboard.widgets = activeWidgets;
                localStorage.setItem('widgets', JSON.stringify(dashboard));

            }, 0);
        }

        function handleEditMode(mode) {
            let grid = $(gridId).data('gridstack');
            if (grid.grid) {
                if (mode) {
                    grid.grid.nodes.forEach(x => {
                        let widgetId = x.el.data('widget');
                        let config = widgetsDict[widgetId];
                        grid.resizable(x.el, config.sidebarSettings.isResizable);
                        grid.movable(x.el, config.sidebarSettings.isMovable);
                    });
                }
                else {
                    grid.disable();
                }
            }
        }

        function setWidgetClasses(el, width) {
            var i, gridItem = el.childNodes[0].childNodes[0],
            widgetId = el.dataset.widget;

            gridItem.classList = "widget-content";
            for ( i = 0; i < width; i++) {
                gridItem.classList.add("widget-content" + "-" + (i + 1));
            }
            gridItem.classList.add(widgetId);
            for (i = 0; i < width; i++) {
                gridItem.classList.add(widgetId + "-" + (i + 1));
            }
        }

        function handleGridEvents() {

            $(gridId).on('gsresizestop', (event, element) => {

                console.log("resize");
                var widgetId = $(element).data("widget"),
                    config = widgetsDict[widgetId],
                    defaultWidth = config.sidebarSettings.defaultWidth,
                    defaultHeight = config.sidebarSettings.defaultHeight,
                    newWidth = $(element)[0].dataset.gsWidth * 1,
                    diff = 0;

                if (config.sidebarSettings.isRatioScale) {
                    if (defaultHeight > defaultWidth) {
                        diff = defaultHeight - defaultWidth;
                    } else if (defaultHeight < defaultWidth) {
                        diff = defaultWidth - defaultHeight;
                    }

                    $(gridId).data("gridstack").resize($(element), newWidth, newWidth + diff);
                }

                saveGrid();

                // set classes for widgets
                var widgetContent = $(element).find('.widget-content');
                widgetContent[0].dispatchEvent(new CustomEvent('resize_stopped'));
                setWidgetClasses(element, newWidth);
            });


            $(gridId).on('change', () => {
                setGridHeight();
            });
            $(gridId).on('dragstop', () => {
                saveGrid();
                setGridHeight();
            });
            $(gridId).on('removed', () => {
                saveGrid();
            });
            $(gridId).on('added', (event, items) => {
                setGridHeight();
                let grid = $(gridId).data('gridstack');
                if (isEditMode) {
                    for (let i = 0; i < items.length; i++) {
                        let widgetId = items[i].el.data('widget'),
                            widget = widgetsDict[widgetId];

                        var newWidget = Widget.widgetInitializer(widgetId, clientId, items[i]);
                        widget.gridInstances.push(newWidget);
                        addToSideBar(widgetId, widget);
                        renderWidgets([newWidget], items[i].el);

                    }
                } else {
                    grid.removeWidget(items[0].el[0], true)
                }

                $(gridId + " .grid-stack-item-content").css("left", gridGaps + "px");
                $(gridId + " .grid-stack-item-content").css("right", gridGaps + "px");

                saveGrid();
            });
            $(gridId).on("click", (e) => {
                var target = $(e.target);
                if (target.is('div.widget-icon-delete')) {

                    let deletedWidget = target.closest('.grid-stack-item');
                    let widgetId = deletedWidget.data('widget');
                    let uid = deletedWidget.data('gs-id');

                    $(gridId).data("gridstack").removeWidget(deletedWidget);

                    let widgetConfig = widgetsDict[widgetId];
                    if (widgetConfig) {
                        var ind = widgetConfig.gridInstances.findIndex(x => x.uid == uid);
                        if (ind >= 0) {
                            widgetConfig.gridInstances.splice(ind, 1);
                        }
                        addToSideBar(widgetId, widgetConfig, true);
                    }
                }
            });
            $(gridId).on("click", (e) => {
                var target = $(e.target);
                if (target.is('div.widget-icon-fullScreen')) {
                    toggleFullscreen($(target).parents(".grid-stack-item-content")[0]);
                }
            });
        }

        function handleCommonEvents() {

            $("#gridGaps").on("input", (e) => {
                $(gridId).data("gridstack").verticalMargin(e.target.value);
                gridGaps = e.target.value;
                saveGrid();
                $(".grid-placeholder-cell").remove();
                addTilePlaceholders();
                setGridHeight();
                $(gridId + " .grid-stack-item-content").css("left", gridGaps + "px");
                $(gridId + " .grid-stack-item-content").css("right", gridGaps + "px");
            });

            $("#gridColumns").on("input", (e) => {
                $(gridId).data("gridstack").setGridWidth(e.target.value);
                width = e.target.value;
                $(".grid-placeholder-cell").remove();
                saveGrid();
                addTilePlaceholders();
                setGridHeight();
            });
            $("#gridRows").on("input", (e) => {
                height = e.target.value;
                saveGrid();
                gridReInit(false);
                setGridHeight();
            });
            $("#gridCellHeight").on("input", (e) => {
                $(gridId).data("gridstack").cellHeight(e.target.value);
                cellHeight = e.target.value;
                $(".grid-placeholder-cell").remove();
                addTilePlaceholders();
                saveGrid();
                setGridHeight();
            });
            $('#editMode').on('change', (e) => {
                isEditMode = $(e.target).is(':checked');
                handleEditMode(isEditMode);
                if (isEditMode) {
                    $("#dashboardEditPanel").addClass('open');
                    $(".dashboard").addClass('open');
                    $(gridId).addClass('edit-mode-on');
                } else {
                    $("#dashboardEditPanel").removeClass('open');
                    $(".dashboard").removeClass('open');
                    $(gridId).removeClass('edit-mode-on');
                }
                // $(".widget-icon-delete").css('display', isEditMode ? 'block' : 'none');
                // $(".widget-icon-edit").css('display', isEditMode ? 'block' : 'none');
                //mainGrid.data('gridstack').enableResize(isEditMode, true)
                document.dispatchEvent(new CustomEvent(isEditMode ? 'grid_editing_started' : 'grid_editing_finished'));
                setGridHeight();
            });

            $("#widget-popup").on("click", (e) => {
                if (e.target.id === "submitConfigBtn") {
                    saveGrid();
                    $(".grid-item-popup").css("display", "none");
                }
            });
            $('.gs-panel-heading').click(function () {
                $(this).find('i').toggleClass('fa-chevron-circle-up fa-chevron-circle-down');
                $(this).next().toggleClass("in");
            });
            $('#saveChanges').click(function () {
                // save grid data to local storage
                saveGrid();
                $('#editMode').prop('checked', false).change();
            });
            $('#reset').click(function () {
                $('#editMode').prop('checked', false).change();
                // discard changes
                if (confirm("Are you sure you want to reset this dashboard - this cannot be undone ?")) {
                    gridReInit(true);
                }
            });
        }

        function toggleFullscreen(elem) {
            if (!document.fullscreenElement) {
                elem.requestFullscreen().then({}).catch(err => {
                    alert(`Error attempting to enable full-screen mode: ${err.message} (${err.name})`);
                });
            } else {
                document.exitFullscreen();
            }
        }
    });
</script>
</body>

</html>