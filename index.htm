<!DOCTYPE html>
<html lang="en">

<head>
    <meta name="viewport" content="width=device-width"/>
    <title>Widgets Demo</title>
    <!-- <link href="/favicon.ico" rel="shortcut icon" type="image/x-icon" /> -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href='https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700' rel='stylesheet' type='text/css'>
    <link href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,600,700" rel="stylesheet">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="css/gridstack.min.css"/>
    <link rel="stylesheet" href="css/gridstack-extra.min.css"/>
    <link rel="stylesheet" href="css/dashboard.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.11.0/jquery-ui.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/3.5.0/lodash.min.js"></script>
    <script src="libs/gridstack.min.js"></script>
    <script src="libs/gridstack.jQueryUI.min.js"></script>
    <script src="scripts/script.js"></script>
    <style type="text/css">

        /* Settings*/
        .settings-label {
            display: block;
        }

        .settings-label .settings-input-text {
            display: inline-block;
            padding-left: 5px;
        }

        .settings-input-title {
            display: block;
            margin-bottom: 5px;
        }

        .settings-input-wrap {
            margin-bottom: 15px;
        }

        .grid-item-popup {
            padding: 20px 0;
        }

        .grid-item-popup__container {
            padding: 0 15px;
            width: 100%;
        }

        .grid-item-popup {
            position: fixed;
            overflow: auto;
            top: 0;
            bottom: 0;
            right: 0;
            width: 500px;
            background-color: #dbdbdb;
            z-index: 1000;
        }

        .widget-icon-edit,
        .widget-icon-delete {
            cursor: pointer;
            z-index: -1;
            opacity: 0;
            transition: opacity .3s ease;
            width: 15px;
            height: 15px;
            position: absolute;
        }

        .widget-icon-delete {
            left: 5px;
            top: 5px;
            background: url('icons/close.svg') #ffffff no-repeat center;
            -webkit-background-size: cover;
            background-size: 9px;
        }

        .widget-icon-edit {
            right: 5px;
            top: 5px;
            background: url('icons/widget-edit-icon.svg') #ffffff no-repeat center;
            -webkit-background-size: cover;
            background-size: 9px;
        }

        .edit-mode-on .grid-stack-item:hover [class^="widget-icon"] {
            z-index: 1;
            opacity: 1;
        }

        .sidebar .widget-content:after {
            content: attr(data-widget-count);
            margin-left: 5px;
            display: inline-flex;
            padding: 1px;
            border-radius: 100px;
            min-width: 18px;
            height: 18px;
            justify-content: center;
            align-items: center;
            font-size: 12px;
            font-weight: 600;
        }

        .dashboardEditPanel {
            display: none;
        }

        .grid-stack-item .grid-stack-item-content {
            background-color: #bbb;
        }

        .grid-stack {
            padding-left: 0;
            list-style: none;
        }

        .sidebar .grid-stack-item {
            cursor: pointer;
        }

        #grid2 {
            background: lightcyan;
        }

        .sidebar .grid-stack-item-content {
            text-align: left;
        }

        .grid-stack-item-content {

            color: #2c3e50;
            text-align: center;
            /*background-color: #18bc9c;*/
        }

        #grid1 .grid-stack-item-content {
            /*border: 1px solid red;*/
        }

        #grid2 .grid-stack-item-content {
            background-color: #9caabc;
        }

        .grid-stack-item-removing {
            opacity: 0.5;
        }

        .trash {
            height: 150px;
            margin-bottom: 20px;
            background: rgba(255, 0, 0, 0.1) center center url(data:image/svg+xml;utf8;base64,PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iaXNvLTg4NTktMSI/Pgo8IS0tIEdlbmVyYXRvcjogQWRvYmUgSWxsdXN0cmF0b3IgMTYuMC4wLCBTVkcgRXhwb3J0IFBsdWctSW4gLiBTVkcgVmVyc2lvbjogNi4wMCBCdWlsZCAwKSAgLS0+CjwhRE9DVFlQRSBzdmcgUFVCTElDICItLy9XM0MvL0RURCBTVkcgMS4xLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL0dyYXBoaWNzL1NWRy8xLjEvRFREL3N2ZzExLmR0ZCI+CjxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgdmVyc2lvbj0iMS4xIiBpZD0iQ2FwYV8xIiB4PSIwcHgiIHk9IjBweCIgd2lkdGg9IjY0cHgiIGhlaWdodD0iNjRweCIgdmlld0JveD0iMCAwIDQzOC41MjkgNDM4LjUyOSIgc3R5bGU9ImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgNDM4LjUyOSA0MzguNTI5OyIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSI+CjxnPgoJPGc+CgkJPHBhdGggZD0iTTQxNy42ODksNzUuNjU0Yy0xLjcxMS0xLjcwOS0zLjkwMS0yLjU2OC02LjU2My0yLjU2OGgtODguMjI0TDMwMi45MTcsMjUuNDFjLTIuODU0LTcuMDQ0LTcuOTk0LTEzLjA0LTE1LjQxMy0xNy45ODkgICAgQzI4MC4wNzgsMi40NzMsMjcyLjU1NiwwLDI2NC45NDUsMGgtOTEuMzYzYy03LjYxMSwwLTE1LjEzMSwyLjQ3My0yMi41NTQsNy40MjFjLTcuNDI0LDQuOTQ5LTEyLjU2MywxMC45NDQtMTUuNDE5LDE3Ljk4OSAgICBsLTE5Ljk4NSw0Ny42NzZoLTg4LjIyYy0yLjY2NywwLTQuODUzLDAuODU5LTYuNTY3LDIuNTY4Yy0xLjcwOSwxLjcxMy0yLjU2OCwzLjkwMy0yLjU2OCw2LjU2N3YxOC4yNzQgICAgYzAsMi42NjQsMC44NTUsNC44NTQsMi41NjgsNi41NjRjMS43MTQsMS43MTIsMy45MDQsMi41NjgsNi41NjcsMi41NjhoMjcuNDA2djI3MS44YzAsMTUuODAzLDQuNDczLDI5LjI2NiwxMy40MTgsNDAuMzk4ICAgIGM4Ljk0NywxMS4xMzksMTkuNzAxLDE2LjcwMywzMi4yNjQsMTYuNzAzaDIzNy41NDJjMTIuNTY2LDAsMjMuMzE5LTUuNzU2LDMyLjI2NS0xNy4yNjhjOC45NDUtMTEuNTIsMTMuNDE1LTI1LjE3NCwxMy40MTUtNDAuOTcxICAgIFYxMDkuNjI3aDI3LjQxMWMyLjY2MiwwLDQuODUzLTAuODU2LDYuNTYzLTIuNTY4YzEuNzA4LTEuNzA5LDIuNTctMy45LDIuNTctNi41NjRWODIuMjIxICAgIEM0MjAuMjYsNzkuNTU3LDQxOS4zOTcsNzcuMzY3LDQxNy42ODksNzUuNjU0eiBNMTY5LjMwMSwzOS42NzhjMS4zMzEtMS43MTIsMi45NS0yLjc2Miw0Ljg1My0zLjE0aDkwLjUwNCAgICBjMS45MDMsMC4zODEsMy41MjUsMS40Myw0Ljg1NCwzLjE0bDEzLjcwOSwzMy40MDRIMTU1LjMxMUwxNjkuMzAxLDM5LjY3OHogTTM0Ny4xNzMsMzgwLjI5MWMwLDQuMTg2LTAuNjY0LDguMDQyLTEuOTk5LDExLjU2MSAgICBjLTEuMzM0LDMuNTE4LTIuNzE3LDYuMDg4LTQuMTQxLDcuNzA2Yy0xLjQzMSwxLjYyMi0yLjQyMywyLjQyNy0yLjk5OCwyLjQyN0gxMDAuNDkzYy0wLjU3MSwwLTEuNTY1LTAuODA1LTIuOTk2LTIuNDI3ICAgIGMtMS40MjktMS42MTgtMi44MS00LjE4OC00LjE0My03LjcwNmMtMS4zMzEtMy41MTktMS45OTctNy4zNzktMS45OTctMTEuNTYxVjEwOS42MjdoMjU1LjgxNVYzODAuMjkxeiIgZmlsbD0iI2ZmOWNhZSIvPgoJCTxwYXRoIGQ9Ik0xMzcuMDQsMzQ3LjE3MmgxOC4yNzFjMi42NjcsMCw0Ljg1OC0wLjg1NSw2LjU2Ny0yLjU2N2MxLjcwOS0xLjcxOCwyLjU2OC0zLjkwMSwyLjU2OC02LjU3VjE3My41ODEgICAgYzAtMi42NjMtMC44NTktNC44NTMtMi41NjgtNi41NjdjLTEuNzE0LTEuNzA5LTMuODk5LTIuNTY1LTYuNTY3LTIuNTY1SDEzNy4wNGMtMi42NjcsMC00Ljg1NCwwLjg1NS02LjU2NywyLjU2NSAgICBjLTEuNzExLDEuNzE0LTIuNTY4LDMuOTA0LTIuNTY4LDYuNTY3djE2NC40NTRjMCwyLjY2OSwwLjg1NCw0Ljg1MywyLjU2OCw2LjU3QzEzMi4xODYsMzQ2LjMxNiwxMzQuMzczLDM0Ny4xNzIsMTM3LjA0LDM0Ny4xNzJ6IiBmaWxsPSIjZmY5Y2FlIi8+CgkJPHBhdGggZD0iTTIxMC4xMjksMzQ3LjE3MmgxOC4yNzFjMi42NjYsMCw0Ljg1Ni0wLjg1NSw2LjU2NC0yLjU2N2MxLjcxOC0xLjcxOCwyLjU2OS0zLjkwMSwyLjU2OS02LjU3VjE3My41ODEgICAgYzAtMi42NjMtMC44NTItNC44NTMtMi41NjktNi41NjdjLTEuNzA4LTEuNzA5LTMuODk4LTIuNTY1LTYuNTY0LTIuNTY1aC0xOC4yNzFjLTIuNjY0LDAtNC44NTQsMC44NTUtNi41NjcsMi41NjUgICAgYy0xLjcxNCwxLjcxNC0yLjU2OCwzLjkwNC0yLjU2OCw2LjU2N3YxNjQuNDU0YzAsMi42NjksMC44NTQsNC44NTMsMi41NjgsNi41N0MyMDUuMjc0LDM0Ni4zMTYsMjA3LjQ2NSwzNDcuMTcyLDIxMC4xMjksMzQ3LjE3MnogICAgIiBmaWxsPSIjZmY5Y2FlIi8+CgkJPHBhdGggZD0iTTI4My4yMiwzNDcuMTcyaDE4LjI2OGMyLjY2OSwwLDQuODU5LTAuODU1LDYuNTctMi41NjdjMS43MTEtMS43MTgsMi41NjItMy45MDEsMi41NjItNi41N1YxNzMuNTgxICAgIGMwLTIuNjYzLTAuODUyLTQuODUzLTIuNTYyLTYuNTY3Yy0xLjcxMS0xLjcwOS0zLjkwMS0yLjU2NS02LjU3LTIuNTY1SDI4My4yMmMtMi42NywwLTQuODUzLDAuODU1LTYuNTcxLDIuNTY1ICAgIGMtMS43MTEsMS43MTQtMi41NjYsMy45MDQtMi41NjYsNi41Njd2MTY0LjQ1NGMwLDIuNjY5LDAuODU1LDQuODUzLDIuNTY2LDYuNTdDMjc4LjM2NywzNDYuMzE2LDI4MC41NSwzNDcuMTcyLDI4My4yMiwzNDcuMTcyeiIgZmlsbD0iI2ZmOWNhZSIvPgoJPC9nPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+CjxnPgo8L2c+Cjwvc3ZnPgo=) no-repeat;
        }

        .sidebar {
            background: rgba(0, 255, 0, 0.1);
            height: 150px;
            padding: 15px;
            text-align: center;
        }

        .sidebar .grid-stack-item {
            width: 100%;
            text-align: center;
            z-index: 10;
            background: rgba(0, 255, 0, 0.1);
            display: inline-block;
        }

        .sidebar .grid-stack-item .grid-stack-item-content {
            background: none;
        }

        .grid-stack {
            min-height: 300px
        }
    </style>
</head>

<body>
<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <label>Edit <input type="checkbox" id="editMode"></label>
        </div>
    </div>
    <div class="row dashboardEditPanel" id="dashboardEditPanel">
        <div class="col-md-12">
            <div class="sidebar"></div>
        </div>
    </div>
    <div class="grid-stack grid-stack-12" id="grid1"></div>
</div>
<script type="text/javascript">
    $(() => {
        // data
        let
            isEditMode = false,
            clientId = 7,
            widgetConfig = [
                {
                    widget: "clockWidget",
                    id: "clockWidget",
                    title: 'Clock',
                    withDatePicker: false,
                    isConfigurable: true
                },
                {
                    widget: "imageWidget2",
                    id: "imageWidget",
                    title: 'Several images',
                    imageUrl: 'https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png',
                    count: "unlimited"  // number or string = "unlimited"
                },
                {
                    widget: "workCountByActivityAndStatusWidget",
                    id: "workCountByActivityAndStatusWidget",
                    title: 'Collections',
                    activityTypeId: 19,
                    workStatusId: 3
                },
                {
                    widget: "imageWidget1",
                    id: "imageWidget",
                    minWidth: 2,
                    minHeight: 1,
                    title: 'Techfinity Logo',
                    isResizable: false,
                    defaultWidget: true,
                    x: 6,
                    y: 2,
                    isRemovable: false
                }
            ],
            mainGrid = $('#grid1'),
            localStorage = window.localStorage,
            widgetsToSave = {
                activeWidgetList: [],
                activeWidgets: []
            },
            widgetsBeforeRemove = [];

        // dashboard activation
        mainGrid.gridstack({
            width: 12,
            float: true,
            acceptWidgets: '.grid-stack-item'
        });

        renderAfterReload();
        widgetListCall();
        allowMoveAndResizeItems(isEditMode);
        handleEvents();

        // item for render
        function gridItem(dataAttr, title, count = '') {

            if (count === "unlimited") {
                count = ''
            }

            return $('<div class="grid-stack-item" data-widget="' + dataAttr + '"><div class="grid-stack-item-content" data-widget="' + dataAttr + '"><div class="widget-content"  data-widget-count="' + count + '">' + title + '</div>' +
                '</div></div></div></div></div></div>');
        }

        //count of active instances
        function getCountActiveIstances(widget) {
            return getActiveWidgets().filter((item) => {
                return item === widget
            }).length;
        }

        // first render
        function renderAfterReload() {
            if (localStorage.getItem('widgets') === null || JSON.parse(localStorage.getItem('widgets')).length === 0) {
                let widgetsDefault = [];
                widgetConfig.forEach((item) => {
                    // render default widgets
                    if (typeof item.defaultWidget !== "undefined" && item.defaultWidget) {
                        widgetsDefault.push(item);
                    } else {
                        // if not default, add to widgets list
                        if (typeof item.count !== 'undefined' && item.count > 0) {
                            $('.sidebar').append(gridItem(item.widget, item.title, item.count));
                        } else {
                            $('.sidebar').append(gridItem(item.widget, item.title));
                        }
                    }
                });
                if (widgetsDefault.length > 0) {
                    renderActiveWidgets(widgetsDefault);
                }
            } else {
                let widgetsFromStore = JSON.parse(localStorage.getItem('widgets')),
                    list = widgetsFromStore.activeWidgetList,
                    activeWidgets = widgetsFromStore.activeWidgets;

                if (typeof activeWidgets !== 'undefined' && activeWidgets.length > 0) {
                    renderActiveWidgets(activeWidgets);
                }

                if (typeof list !== 'undefined' && list.length > 0) {
                    list.forEach((key) => {
                        widgetConfig.forEach((item) => {
                            if (item.widget === key) {
                                if (typeof item.count !== 'undefined' && item.count > 0) {
                                    $('.sidebar').append(gridItem(key, item.title, item.count - getCountActiveIstances(item.widget)))
                                } else {
                                    $('.sidebar').append(gridItem(key, item.title))
                                }
                            }
                        });

                    });
                }
            }
        }

        // renderActiveWidgets
        function renderActiveWidgets(activeWidgets) {
            activeWidgets.forEach((key) => {
                let activeParams = key,
                    localParams = widgetConfig.filter((item) => {
                        return item.widget === key.widget
                    })[0],
                    el = gridItem(key.widget, key.title);
                if (typeof activeParams.defaultWidget !== 'undefined' && activeParams.defaultWidget) {
                    activeParams = localParams;
                }

                let minWidth, minHeight, maxWidth, maxHeight;

                if (typeof localParams.minWidth !== "undefined") {
                    minWidth = localParams.minWidth;
                }
                if (typeof localParams.minHeight !== "undefined") {
                    minHeight = localParams.minHeight;
                }
                if (typeof localParams.maxWidth !== "undefined") {
                    maxWidth = localParams.maxWidth;
                }
                if (typeof localParams.maxHeight !== "undefined") {
                    maxHeight = localParams.maxHeight;
                }
                let newItem = mainGrid.data("gridstack").addWidget(
                    el,
                    activeParams.x,
                    activeParams.y,
                    activeParams.width,
                    activeParams.height,
                    false,
                    minWidth,
                    maxWidth,
                    minHeight,
                    maxHeight,
                    true
                );

                if (typeof localParams.isResizable !== 'undefined' && !localParams.isResizable) {
                    mainGrid.data("gridstack").resizable(newItem, localParams.isResizable);
                }
                el[0].children[0].children[0].innerHTML = '<div class="widget-loading-container"><div class="widget-loading">' +
                    '<div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div>';


                // init
                widgetConfig.forEach((itemName) => {
                    if (itemName.widget === key.widget) {
                        Widget.widgetInitializer(itemName).initBase(el[0].children[0].children[0], clientId);
                    }
                });
            });
        }

        function saveWidgetItems() {
            let grid = mainGrid.data("gridstack").grid,
                activeWidgets = [];
            setTimeout(() => {
                for (let i = 0; grid.nodes.length > i; i++) {
                    let
                        widgetId = grid.nodes[i].el[0].children[0].dataset.widget,
                        itemData = grid.nodes[i].el[0].dataset;
                    if (typeof widgetId !== 'undefined') {
                        let newWidget = {
                            widget: widgetId,
                            width: itemData.gsWidth,
                            height: itemData.gsHeight,
                            x: itemData.gsX,
                            y: itemData.gsY
                        };
                        activeWidgets.push(newWidget);
                    }
                }
                widgetsToSave.activeWidgets = activeWidgets;
                widgetsToSave.activeWidgetList = getWidgetList();
                localStorage.setItem('widgets', JSON.stringify(widgetsToSave));
            }, 0);

        }

        function allowMoveAndResizeItems(mode) {
            let grid = mainGrid.data('gridstack');
            if (grid.grid && grid.grid.nodes.length > 0) {
                for (let i = 0; grid.grid.nodes.length > i; i++) {
                    let widgetName = grid.grid.nodes[i].el[0].children[0].dataset.widget;
                    widgetConfig.forEach((item) => {
                        if (widgetName === item.widget && (typeof item.isResizable === 'undefined' || !item.isResizable && !mode)) {
                            mainGrid.data('gridstack').resizable(grid.grid.nodes[i].el[0], mode);
                        }
                    });
                    mainGrid.data('gridstack').movable(grid.grid.nodes[i].el[0], mode);
                }
            }
        }

        // make draggable items in the widget list
        function widgetListCall() {
            $('.sidebar .grid-stack-item').draggable({
                revert: 'invalid',
                handle: '.grid-stack-item-content',
                scroll: false,
                appendTo: 'body'
            });
        }

        function getWidgetList() {
            let sidebarItems = $('.sidebar').children(),
                sidebarItemsKeys = [];
            if (sidebarItems && sidebarItems.length > 0) {
                for (let i = 0; sidebarItems.length > i; i++) {
                    sidebarItemsKeys.push(sidebarItems[i].children[0].dataset.widget);
                }
            }
            return sidebarItemsKeys;
        }

        function getActiveWidgets() {
            let
                gridItem = mainGrid.data("gridstack").grid.nodes,
                gridAllItems = [];
            for (let i = 0; gridItem.length > i; i++) {
                gridAllItems.push(gridItem[i].el[0].children[0].dataset.widget);
            }
            return gridAllItems;
        }

        function handleEvents() {
            mainGrid.on('dragstart', () => {
                widgetsBeforeRemove = mainGrid.data('gridstack').grid.nodes.map((item) => {
                    return item.el[0].children[0].dataset.widget
                });
            });
            mainGrid.on('dragstop', () => {
                saveWidgetItems();
            });
            mainGrid.on('gsresizestop', () => {
                saveWidgetItems();
            });
            mainGrid.on('added', (event, items) => {
                let grid = mainGrid.data('gridstack');
                if (isEditMode) {
                    for (let i = 0; i < items.length; i++) {
                        let el = items[i].el[0],
                            widgetId = el.children[0].getAttribute('data-widget'),
                            widget = widgetConfig.filter((item) => {
                                return item.widget === widgetId
                            })[0],
                            widgetsCount = widget.count;

                        // if multiple instances
                        if (typeof widgetsCount === "number" && widgetsCount > 1) {
                            $('.sidebar').append(gridItem(widget.widget, widget.title, (widgetsCount - 1)));
                            widgetListCall();
                        } else if (typeof widgetsCount === "string" && widgetsCount === "unlimited") {
                            $('.sidebar').append(gridItem(widget.widget, widget.title));
                            widgetListCall();
                        }


                        el.children[0].children[0].innerHTML = '<div class="widget-loading-container"><div class="widget-loading">' +
                            '<div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div>';


                        // init
                        widgetConfig.forEach((item) => {
                            if (item.widget === widget.widget) {
                                let widgetProperties = Widget.widgetInitializer(widget);
                                grid.update(
                                    el,
                                    el.dataset.gsX,
                                    el.dataset.gsY,
                                    widgetProperties.config.width,
                                    widgetProperties.config.height
                                );
                                grid.minWidth(el, widgetProperties.config.minWidth);
                                grid.minHeight(el, widgetProperties.config.minHeight);
                                grid.resizable(el, widgetProperties.config.isResizable);
                                widgetProperties.initBase(el.children[0].children[0], clientId);
                            }
                        });
                    }
                    saveWidgetItems();
                } else {
                    grid.removeWidget(items[0].el[0], true)
                }
            });
            $('#editMode').on('change', (e) => {
                isEditMode = $(e.target).is(':checked');
                allowMoveAndResizeItems(isEditMode);
                $("#dashboardEditPanel").css('display', isEditMode ? 'block' : 'none');
                $("#grid1").toggleClass('edit-mode-on');
                $(".widget-icon-delete").css('display', isEditMode ? 'block' : 'none');
                document.dispatchEvent(new CustomEvent( isEditMode ? 'grid_editing_started' : 'grid_editing_finished'));
            });
            // remove
            $('#grid1').on("click", (e) => {
                if (e.target.classList[0] === $('div.widget-icon-delete')[0].classList[0]) {
                    let deletedWidget = $(e.target).parents('.grid-stack-item')[0].dataset.widget;
                    mainGrid.data("gridstack").removeWidget(
                        $(e.target).parents('.grid-stack-item')[0]
                    );
                    widgetConfig.forEach((item) => {
                        if (deletedWidget === item.widget) {
                            if (typeof item.count === "number" && item.count >= 1) {
                                let
                                    isAddDataCount = getCountActiveIstances(item.widget) < item.count && (item.count - getCountActiveIstances(item.widget)) !== 1,
                                    isAddFirstItem = (item.count - getCountActiveIstances(item.widget)) === 1;

                                if (isAddDataCount) {
                                    let sidebarItems = $('.sidebar').children();
                                    if (sidebarItems && sidebarItems.length > 0) {
                                        for (let i = 0; sidebarItems.length > i; i++) {
                                            if (sidebarItems[i].children[0].dataset.widget === deletedWidget) {
                                                sidebarItems[i].children[0].children[0].dataset.widgetCount = item.count - getCountActiveIstances(item.widget);
                                            }
                                        }
                                    }
                                } else if (isAddFirstItem) {
                                    $('.sidebar').append(gridItem(item.widget, item.title));
                                }
                            } else if (typeof item.count === "string" && item.count === "unlimited") {
                            } else {
                                $('.sidebar').append(gridItem(item.widget, item.title));
                            }
                        }
                    });
                    saveWidgetItems();
                    // make draggable new appended item in the widget list
                    widgetListCall();
                }

            });
        }
    });
</script>
</body>

</html>