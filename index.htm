<!DOCTYPE html>
<html lang="en">

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!--not require css/fonts-->
    <link href='https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700' rel='stylesheet' type='text/css'>
    <link href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,600,700" rel="stylesheet">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.1/css/all.css"
          integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" crossorigin="anonymous">
    <!--grid css-->
    <link rel="stylesheet" href="css/libs/gridstack.min.css"/>
    <link rel="stylesheet" href="css/libs/gridstack-extra.min.css"/>
    <!--our styles for dashboard and widgets-->
    <link rel="stylesheet" href="css/dashboard/main.min.css">
    <!--grid require-->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.11.0/jquery-ui.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.0/lodash.min.js"></script>
    <!--grid js-->
    <script src="scripts/libs/gridstack.js"></script>
    <script src="scripts/libs/gridstack.jQueryUI.min.js"></script>

    <!--for timezone-->
    <script src="scripts/libs/moment.js"></script>
    <script src="scripts/libs/moment-timezone-with-data-2012-2022.js"></script>
    <!--our main js-->
    <script src="scripts/dashboard/main.js"></script>
    <title>Widgets Demo</title>
</head>

<body>
<div class="dashboard">
    <div class="dashboardEditPanel" id="dashboardEditPanel">
        <div class="sidebar"></div>
        <div class="buttons">
            <button class="btn btn-primary" id="saveChanges">Save</button>
            <button class="btn btn-default" id="cancel">Cancel</button>
        </div>
    </div>

    <label>Edit <input type="checkbox" id="editMode"></label>
    <div class="grid-container">
        <div class="grid-stack grid-stack-12" id="grid1"></div>
    </div>
</div>

<div class="grid-item-popup" id="widget-popup">
    <div class="grid-item-popup__container" id="widget-popup-container">
    </div>
</div>


<script type="text/javascript">
    $(() => {

        // all allowed widgets
        let allAllowedWidgets = ["clockWidget", "imageWidget", "workCountByActivityAndStatusWidget"];
        // saved widgets(default or user-saved)
        let defaultConfig = [
            //{
            //    id: "clockWidget",
            //    x: 0,
            //    y: 0,
            //    width: 3,
            //    height: 2,
            //    options: {
            //        dateFormat: 24
            //    }
            //},
            {
                id: "imageWidget",
                x: 5,
                y: 3,
                width: 2,
                height: 2,
                options: {
                    imageUrl: 'https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png'
                }
            }
        ];

        let
            isEditMode = false,
            clientId = 7,
            width = 12,
            height = 10,
            mainGrid = $('#grid1'),
            sideBar = $('.sidebar'),
            localStorage = window.localStorage;

        checklocalStorage();

        var widgetsDict = {};
        var categories = [];
        allAllowedWidgets.map(w => {
            var instances = defaultConfig
                .filter(x => x.id === w)
                .map(x => Widget.widgetInitializer(w, clientId, x));
            widgetsDict[w] = {
                sidebarSettings: Widget.getSidebarSettings(w),
                gridInstances: instances
            };
            categories.push(widgetsDict[w].sidebarSettings.category);
        });

        // console.log("widgetsDict", widgetsDict);
        categories = _.uniqBy(categories);


        gridInit();
        addTilePlaceholders();
        renderCategories();
        widgetsInit(widgetsDict);
        handleEditMode(isEditMode);
        handleEvents();
        setGridHeight();


        function gridInit() {
            // dashboard activation
            mainGrid.gridstack({
                width: width,
                height: height,
                float: true,
                animate: true,
                acceptWidgets: '.grid-stack-item',
            });
            mainGrid
                .on('dropover', (ev, ui) => ui.helper.hide())
                .on('dropout', (ev, ui) => ui.helper.show());
        }

        function addTilePlaceholders() {
            var
                height = mainGrid.data("gridstack").grid.height,
                width = mainGrid.data("gridstack").grid.width,
                rowHight = mainGrid.data("gridstack").opts.cellHeight + mainGrid.data("gridstack").opts.verticalMargin;

            if (height > 0 && width > 0) {
                for (var i = 0; i < width; i++) {
                    var left = 100 * i / width;
                    for (var j = 0; j < height; j++) {
                        var
                            $placeholderCell = $("<div class='grid-placeholder-cell'></div>"),
                            top = rowHight * j;
                        $placeholderCell.css("left", left + "%");
                        $placeholderCell.css("top", top + "px");
                        $placeholderCell.appendTo(".grid-container");
                    }
                }
            }
        }

        function setGridHeight() {
            mainGrid.height((mainGrid.data("gridstack").opts.cellHeight + mainGrid.data("gridstack").opts.verticalMargin) * height);
            mainGrid.data("data-gs-current-height", height);
        }
        function checklocalStorage() {
            let localstore = JSON.parse(localStorage.getItem("widgets"));
            if (typeof localstore !== "undefined" && localstore != null) {
                defaultConfig = localstore;
            }
        }

        function renderCategories() {
            categories.forEach(x => {
                sideBar
                    .append(
                        $('<div>').addClass('panel panel-default')
                            .append($('<div>').addClass('panel-heading')
                                .append($('<div>').addClass('panel-title')
                                    .append('<i class="fas fa-chevron-circle-up"></i> ' + x)))
                            .append($('<div>').addClass('panel-collapse collapse in').attr('id', x)
                                .append($('<div>').addClass('panel-body'))
                            )
                    )
            });
        }

        function addToSideBar(id, widget, remove) {
            var config = widget.sidebarSettings;
            var count = config.maxCount - widget.gridInstances.length;
            var isNeededToAdd = remove ? count === 1 : count > 0;

            if (isNeededToAdd) {
                var icon = $('<div class="widget-icon"><i class="' + config.icon + '"></i></div>');
                var body = $('<div>').addClass('widget-body')
                    .append($('<div>').addClass('widget-title')
                        .text(config.title)
                        .attr('data-widget-count', count == Infinity ? '' : count))
                    .append($('<hr>'))
                    .append($('<div>').addClass('widget-description').text(config.description));

                $('<div class="grid-stack-item sid" data-widget="' + id + '"></div>')
                    .append(icon)
                    .append(body)
                    .data('_gridstack_node', {
                        width: config.defaultWidth,
                        height: config.defaultHeight
                    })
                    .draggable({
                        revert: 'invalid',
                        handle: '.widget-body',
                        scroll: false,
                        appendTo: 'body'
                    })
                    .appendTo(sideBar.find('#' + config.category).find('.panel-body'));
            }
            else if (remove && count > 0) {
                $('.sid[data-widget="' + id + '"] .widget-title').attr('data-widget-count', count == Infinity ? '' : count);
            }
        }

        function widgetsInit(widgets) {

            let widgetsDefault = [];

            for (var widgetId in widgets) {
                let widgetConfig = widgets[widgetId];
                if (widgetConfig.gridInstances.length < widgetConfig.sidebarSettings.maxCount) {
                    addToSideBar(widgetId, widgetConfig);
                }
                widgetsDefault = widgetsDefault.concat(widgetConfig.gridInstances);
            }

            if (widgetsDefault.length > 0) {
                renderWidgets(widgetsDefault);
            }
        }

        function renderWidgets(activeWidgets, element) {
            activeWidgets.forEach(widget => {
                var el = $('<div class="grid-stack-item"><div class="grid-stack-item-content"><div class="widget-content"><div class="widget-loading-container">' +
                    '<div class="widget-loading"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div>' +
                    '</div></div></div></div></div>');

                if (element) {
                    element.find('.widget-body').remove();
                    element.find('.widget-icon').remove();
                    el = element.prepend(el.find('.grid-stack-item-content'));
                }

                el.attr('data-widget', widget.id);

                var grid = mainGrid.data("gridstack");

                if (element) {
                    el.attr('data-gs-id', widget.uid);
                    grid.update(
                        el,
                        widget.position.x,
                        widget.position.y,
                        widget.size.width,
                        widget.size.height,
                    );
                }
                else {
                    grid.addWidget(
                        el,
                        widget.position.x,
                        widget.position.y,
                        widget.size.width,
                        widget.size.height,
                        false,
                        widget.config.minWidth,
                        widget.config.maxWidth,
                        widget.config.minHeight,
                        widget.config.maxHeight,
                        widget.uid
                    );
                }

                grid.minWidth(el, widget.config.minWidth);
                grid.minHeight(el, widget.config.minHeight);
                grid.maxHeight(el, widget.config.maxHeight);
                grid.maxWidth(el, widget.config.maxWidth);
                grid.resizable(el, widget.sidebarSettings.isResizable);
                grid.movable(el, widget.sidebarSettings.isMovable);

                widget.initBase(el.find('.widget-content')[0]);
            });
        }

        function saveGrid() {
            let grid = mainGrid.data("gridstack").grid,
                activeWidgets = [];
            setTimeout(() => {
                for (let i = 0; grid.nodes.length > i; i++) {
                    let itemData = grid.nodes[i].el[0].dataset;
                    if (typeof itemData.widget !== 'undefined') {
                        let newWidget = {
                            id: itemData.widget,
                            uid: itemData.gsId,
                            x: itemData.gsX,
                            y: itemData.gsY,
                            width: itemData.gsWidth,
                            height: itemData.gsHeight
                        };
                        let instance = widgetsDict[itemData.widget].gridInstances.find((item) => {
                            return item.uid === itemData.gsId
                        });
                        newWidget.options = instance.options;
                        console.log(newWidget);
                        activeWidgets.push(newWidget);
                    }
                }
                localStorage.setItem('widgets', JSON.stringify(activeWidgets));
            }, 0);
        }

        function handleEditMode(mode) {
            let grid = mainGrid.data('gridstack');
            if (grid.grid) {
                if (mode) {
                    grid.grid.nodes.forEach(x => {
                        let widgetId = x.el.data('widget');
                        let config = widgetsDict[widgetId];
                        //console.log(config.sidebarSettings.isResizable);
                        grid.resizable(x.el, config.sidebarSettings.isResizable);
                        grid.movable(x.el, config.sidebarSettings.isMovable);
                    });
                }
                else {
                    grid.disable();
                }
            }
        }

        function handleEvents() {
            mainGrid.on('gsresizestop', (event, element) => {
                $(element).find('.widget-content')[0].dispatchEvent(new CustomEvent('resize_stopped'));
            });
            mainGrid.on('change', () => {
                setGridHeight();
            });
            mainGrid.on('added', (event, items) => {
                let grid = mainGrid.data('gridstack');
                if (isEditMode) {
                    for (let i = 0; i < items.length; i++) {
                        let widgetId = items[i].el.data('widget'),
                            widget = widgetsDict[widgetId];

                        var newWidget = Widget.widgetInitializer(widgetId, clientId, items[i]);
                        widget.gridInstances.push(newWidget);

                        addToSideBar(widgetId, widget);

                        renderWidgets([newWidget], items[i].el);
                    }
                } else {
                    grid.removeWidget(items[0].el[0], true)
                }
            });
            $('#editMode').on('change', (e) => {
                isEditMode = $(e.target).is(':checked');
                handleEditMode(isEditMode);
                $("#dashboardEditPanel").toggleClass('open');
                $(".dashboard").toggleClass('open');
                $("#grid1").toggleClass('edit-mode-on');
                $(".widget-icon-delete").css('display', isEditMode ? 'block' : 'none');
                //mainGrid.data('gridstack').enableResize(isEditMode, true)
                document.dispatchEvent(new CustomEvent(isEditMode ? 'grid_editing_started' : 'grid_editing_finished'));
            });
            $('.panel-heading').click(function () {
                $(this).find('i').toggleClass('fa-chevron-circle-up fa-chevron-circle-down');
                $(this).next().toggleClass("in");
            });
            $('#saveChanges').click(function () {
                // save grid data to local storage
                saveGrid();
                $('#editMode').prop('checked', false).change();
            });
            $('#cancel').click(function () {
                // discard changes
                $('#editMode').prop('checked', false).change();
            });
            $('#grid1').on("click", (e) => {
                var target = $(e.target);
                if (target.is('div.widget-icon-delete')) {

                    let deletedWidget = target.closest('.grid-stack-item');
                    let widgetId = deletedWidget.data('widget');
                    let uid = deletedWidget.data('gs-id');

                    mainGrid.data("gridstack").removeWidget(deletedWidget);

                    let widgetConfig = widgetsDict[widgetId];
                    if (widgetConfig) {
                        var ind = widgetConfig.gridInstances.findIndex(x => x.uid == uid);
                        if (ind >= 0) {
                            widgetConfig.gridInstances.splice(ind, 1);
                        }
                        addToSideBar(widgetId, widgetConfig, true);
                    }
                }
            });
        }
    });
</script>
</body>

</html>